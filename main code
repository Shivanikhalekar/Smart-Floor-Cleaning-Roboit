#define echoPin 9
#define triggerPin 8
#include <SoftwareSerial.h> //add the soft serial libray
#define rxpin 2 //set the RX pin to pin 2
#define txpin 3 //set the TX pin to pin 3
char BT_input;
int motorPin1 = 3; // pin 2 on L293D IC
int motorPin2 = 2; // pin 3 on L293D IC
int motorPin3 = 5; // pin 4 on L293D IC
int motorPin4 = 4; // pin 5 on L293D IC
SoftwareSerial Bluetooth(0, 1);
int buzzer = 12;//the pin of the active buzzer
int relay = A0;
void setup() {
pinMode(triggerPin, OUTPUT); // Sets the trigPin as an OUTPUT
pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
Serial.begin(9600); // Serial Communication is starting with 9600 of
baudrate speed
Bluetooth.begin(9600);
pinMode(motorPin1, OUTPUT);
pinMode(motorPin2, OUTPUT);
pinMode(motorPin3, OUTPUT);
pinMode(motorPin4, OUTPUT);
digitalWrite(motorPin1,LOW) ;
digitalWrite(motorPin2,LOW) ;
digitalWrite(motorPin3,LOW) ;
digitalWrite(motorPin4,LOW) ;
Bluetooth.println("Floor Cleaning Robot!!");
pinMode(relay, OUTPUT);
digitalWrite(relay, LOW);
delay(500);
void loop() {
//relay
digitalWrite(relay, LOW);
delay(30);
digitalWrite(relay, HIGH);
delay(5000);

//Ultrasonic
long highPulseDuration;
int calculatedDistanceCm;
//Set the trigPin to low, before setting it to high for the pulse
digitalWrite(triggerPin, LOW);
delayMicroseconds(5);
// Create the 10 seconds pulse on the trig pin
digitalWrite(triggerPin, HIGH);
delayMicroseconds(10);
// Set the pin to low to end the pulse
digitalWrite(triggerPin, LOW);
// Read the duration of the high pulse on the echo pin
highPulseDuration = pulseIn(echoPin, HIGH);
// Calculating the distance
calculatedDistanceCm = highPulseDuration * 0.034 / 2; // Speed of sound wave
divided by 2 (go and back)
// Displays the distance on the Serial Monitor
Serial.print("Calculated Distance: ");
Serial.print(calculatedDistanceCm);
Serial.println(" cm");
// Bluetooth.print("Calculated Distance: ");
// Bluetooth.print(calculatedDistanceCm);
// Bluetooth.println(" cm");
delay(1000);
if ( calculatedDistanceCm < 30)
{
digitalWrite(12,HIGH);
delay(1);//wait for 1ms
digitalWrite(12,LOW);
delay(1);//wait for 1ms
digitalWrite(motorPin1, LOW);
digitalWrite(motorPin2, LOW);
digitalWrite(motorPin3, LOW);
digitalWrite(motorPin4, LOW);
Serial.println("Stop");
Bluetooth.println("Stop");
delay(1000);
}
else
{
}
// MOTOR CODE
if (Bluetooth.available())
{
BT_input=Bluetooth.read();
Serial.print("BT_input:");
Serial.println(BT_input);
if (BT_input=='1')
{
digitalWrite(motorPin1, LOW);
digitalWrite(motorPin2, HIGH);
digitalWrite(motorPin3, HIGH);
digitalWrite(motorPin4, LOW);
Serial.println("Motors are rotating FORWARD");
Bluetooth.println("Motors are rotating FORWARD");
}
else if (BT_input=='2')
{
digitalWrite(motorPin1, HIGH);
digitalWrite(motorPin2, LOW);
digitalWrite(motorPin3, LOW);
digitalWrite(motorPin4, HIGH);
Serial.println("Motors are rotating BACKWORD");
Bluetooth.println("Motors are rotating BACKWORD");
}
else if (BT_input=='3')
{
digitalWrite(motorPin1, HIGH);
digitalWrite(motorPin2, LOW);
digitalWrite(motorPin3, LOW);
digitalWrite(motorPin4, LOW);
Serial.println("RIGHT");
Bluetooth.println("RIGHT");
}
else if (BT_input=='4')
{
digitalWrite(motorPin1, LOW);
digitalWrite(motorPin2, LOW);
digitalWrite(motorPin3, HIGH);
digitalWrite(motorPin4, LOW);
Serial.println("left");
Bluetooth.println("left");
}
else if (BT_input=='5')
{
digitalWrite(motorPin1, LOW);
digitalWrite(motorPin2, LOW);
digitalWrite(motorPin3, LOW);
digitalWrite(motorPin4, LOW);
Serial.println("Stop");
Bluetooth.println("Stop");
}
else {
digitalWrite(motorPin1, LOW);
digitalWrite(motorPin2, LOW);
digitalWrite(motorPin3, LOW);
digitalWrite(motorPin4, LOW);
Serial.println("Motors are Off");
Bluetooth.println("Motors are Off");
}
}
}
